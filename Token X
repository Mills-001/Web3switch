// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

contract TokenX{
    string public name ="Token X";
    string public symbol ="X";
    uint8 public decimals = 18;
    uint256 public totalSupply;

    address public owner;

    mapping (address =>uint256) public balances;

    mapping (address => mapping(address =>uint256)) public allowances;

    constructor(){
        owner = msg.sender;
        totalSupply = 1000000*10**decimals;
        balances [owner] = totalSupply;
        emit Transfer(address(0), owner, totalSupply);
    }

    function balanceOf(address account) public view returns (uint256){
        return balances[account];
    }

    function transfer (address to,uint256 amount) public returns (bool){
        require (to != address(0),"Cannot transfer to zero acount");
        require (balances[msg.sender] >=amount, "Not enought Tokens");

        balances[msg.sender] -= amount;
        balances[to] += amount;

        emit Transfer(msg.sender, to , amount);
        return true;
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        require (spender !=address(0),"Cannot approve zero address");

        allowances [msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function allowance(address tokenOwner, address spender) public view returns (uint256){
        return allowances[tokenOwner][spender];
    }

    function transForm(address from, address to, uint256 amount) public returns (bool){
        require(to != address(0), "Cannot transfer to zero account");
        require(balances[from] >= amount, "Not enough tokens");
        require(allowances[from][msg.sender] >= amount, "Not enough allowance");

        balances[from] -= amount;
        balances[to] += amount;
        allowances[from][msg.sender] -= amount;
        
        emit Transfer(from, to, amount);
        return true;
    }

    function purchaseProperty(string memory propertyId, uint256 tokenAmount) public returns (bool){
        require (balances[msg.sender] >= tokenAmount, "Not enough token for property purchase");
        require(tokenAmount > 0, "Amount must be greater than 0");

        balances[msg.sender] -= tokenAmount;
        balances[owner] += tokenAmount;

        emit PropertyPurchase(msg.sender, tokenAmount, propertyId);
        emit Transfer (msg.sender, owner, tokenAmount);
        return true;
    }

    function mint(address to, uint256 amount) public returns(bool){
        require(msg.sender == owner , "Only Owner can mint tokens");
        require(to != address(0), "Cannot mint to zero address");

        totalSupply += amount;
        balances[to] += amount;

        emit Transfer(address (0), to, amount);
        return true;
    }

event Transfer(address indexed from, address indexed to, uint256 value);
event Approval(address indexed owner, address indexed spender,uint256 amount);
event PropertyPurchase(address indexed sender, uint256 amount, string propertyId);
    function getContractInfo() public view returns (string memory, string memory, uint256, address){
        return (name, symbol, totalSupply, owner);
    }
}
